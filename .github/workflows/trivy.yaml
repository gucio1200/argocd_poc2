name: Trivy

on:
  pull_request:

permissions:
  pull-requests: write

jobs:
  trivy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get modified folders
        id: changed
        uses: tj-actions/changed-files@v46
        with:
          dir_names: "true"

      - name: Install kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: "5.7.1"

      - name: Install Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          trivy_version: "0.66.0"

      - name: Find affected kustomizations
        id: kustomizations
        run: |
          kustomizations=$(./.github/scripts/find_kustomization.sh "${{ steps.changed.outputs.all_changed_files }}")
          echo "kustomizations=$kustomizations" >> "$GITHUB_OUTPUT"
          echo "Affected kustomizations: $kustomizations"

      - name: Process kustomization folders
        id: extract_images
        run: |
          declare -A images_set
          for folder in ${{ steps.kustomizations.outputs.kustomizations }}; do
            echo "Processing folder: $folder"
            mapfile -t imgs < <(kustomize build --enable-helm --load-restrictor LoadRestrictionsNone "$folder" | grep -E 'image: ' | awk '{print $2}')
            for img in "${imgs[@]}"; do
              images_set["$img"]=1
            done
          done

          # Prepare space-separated list of unique images
          printf -v images_str "%s " "${!images_set[@]}"
          images_str="${images_str%" "}"

          echo "docker_images=$images_str" >> "$GITHUB_OUTPUT"

      - name: Scan Docker images
        id: trivy
        run: |
          result=""
          exit_code=0
          mkdir -p trivy-reports

          for img in ${{ steps.extract_images.outputs.docker_images }}; do
            echo "üîç Scanning image: $img"

            # Run Trivy JSON scan
            outfile="trivy-reports/$(echo $img | tr '/' '_' | tr ':' '_').json"
            trivy image --quiet --severity HIGH,CRITICAL --format json -o "$outfile" "$img" || true
            scan_output=$(cat "$outfile")

            # Count HIGH and CRITICAL vulnerabilities
            high=$(echo "$scan_output" | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length')
            critical=$(echo "$scan_output" | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length')

            # Extract CVE IDs for HIGH/CRITICAL vulnerabilities
            cves=$(echo "$scan_output" | jq -r '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL") | .VulnerabilityID] | unique | join(", ")')

            if [[ $high -eq 0 && $critical -eq 0 ]]; then
              result+="‚úÖ $img ‚Üí No HIGH/CRITICAL vulnerabilities"$'\n\n'
            else
              result+="‚ùå $img ‚Üí $high HIGH / $critical CRITICAL"$'\n'
              result+="CVE IDs: $cves"$'\n\n'
              exit_code=1
            fi
          done

          echo "scan_result<<EOF" >> "$GITHUB_OUTPUT"
          echo "$result" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "exit_code=$exit_code" >> "$GITHUB_OUTPUT"

      - name: Comment PR with Trivy results
        if: ${{ steps.trivy.outputs.scan_result != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const marker = "<!-- trivy-scan -->";
            const commentBody = `${marker}
            ## üõ°Ô∏è Trivy Scan Results
            ${{ steps.trivy.outputs.scan_result }}`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.find(c => c.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }

#      - name: Upload Trivy results to DefectDojo
#        if: ${{ steps.trivy_scan.outputs.trivy_exit_code != '' }}
#        run: |
#          for file in trivy-reports/*.json; do
#            echo "üì§ Uploading $file to DefectDojo..."
#            curl -s -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
#              -H "Authorization: Token $DEFECTDOJO_API_KEY" \
#              -F 'scan_type=Trivy Scan' \
#              -F 'active=true' \
#              -F 'verified=true' \
#              -F "file=@${file}" \
#              -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
#              -F "minimum_severity=High" \
#              -F "close_old_findings=false" \
#              -F "push_to_jira=false"
#          done
#        env:
#          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
#          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
#          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}

      - name: Fail if vulnerabilities found
        if: ${{ steps.trivy.outputs.exit_code != '0' }}
        run: |
          echo "‚ùå HIGH or CRITICAL vulnerabilities detected!"
          exit 1
